test = """498,4 -> 498,6 -> 496,6
503,4 -> 502,4 -> 502,9 -> 494,9"""


data = """440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
448,105 -> 448,101 -> 448,105 -> 450,105 -> 450,98 -> 450,105 -> 452,105 -> 452,97 -> 452,105 -> 454,105 -> 454,100 -> 454,105
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
435,160 -> 440,160
487,45 -> 492,45
506,25 -> 511,25
448,105 -> 448,101 -> 448,105 -> 450,105 -> 450,98 -> 450,105 -> 452,105 -> 452,97 -> 452,105 -> 454,105 -> 454,100 -> 454,105
434,156 -> 439,156
421,160 -> 426,160
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
509,22 -> 514,22
426,152 -> 431,152
436,141 -> 436,143 -> 430,143 -> 430,149 -> 449,149 -> 449,143 -> 442,143 -> 442,141
463,51 -> 463,53 -> 459,53 -> 459,59 -> 470,59 -> 470,53 -> 468,53 -> 468,51
463,51 -> 463,53 -> 459,53 -> 459,59 -> 470,59 -> 470,53 -> 468,53 -> 468,51
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
464,78 -> 464,82 -> 462,82 -> 462,85 -> 476,85 -> 476,82 -> 468,82 -> 468,78
467,48 -> 476,48
448,105 -> 448,101 -> 448,105 -> 450,105 -> 450,98 -> 450,105 -> 452,105 -> 452,97 -> 452,105 -> 454,105 -> 454,100 -> 454,105
473,45 -> 478,45
449,125 -> 461,125 -> 461,124
442,160 -> 447,160
491,19 -> 496,19
427,156 -> 432,156
465,92 -> 469,92
463,51 -> 463,53 -> 459,53 -> 459,59 -> 470,59 -> 470,53 -> 468,53 -> 468,51
466,72 -> 466,65 -> 466,72 -> 468,72 -> 468,70 -> 468,72 -> 470,72 -> 470,70 -> 470,72 -> 472,72 -> 472,66 -> 472,72 -> 474,72 -> 474,65 -> 474,72
466,72 -> 466,65 -> 466,72 -> 468,72 -> 468,70 -> 468,72 -> 470,72 -> 470,70 -> 470,72 -> 472,72 -> 472,66 -> 472,72 -> 474,72 -> 474,65 -> 474,72
448,105 -> 448,101 -> 448,105 -> 450,105 -> 450,98 -> 450,105 -> 452,105 -> 452,97 -> 452,105 -> 454,105 -> 454,100 -> 454,105
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
448,105 -> 448,101 -> 448,105 -> 450,105 -> 450,98 -> 450,105 -> 452,105 -> 452,97 -> 452,105 -> 454,105 -> 454,100 -> 454,105
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
453,108 -> 453,112 -> 452,112 -> 452,120 -> 464,120 -> 464,112 -> 458,112 -> 458,108
466,72 -> 466,65 -> 466,72 -> 468,72 -> 468,70 -> 468,72 -> 470,72 -> 470,70 -> 470,72 -> 472,72 -> 472,66 -> 472,72 -> 474,72 -> 474,65 -> 474,72
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
497,13 -> 502,13
466,72 -> 466,65 -> 466,72 -> 468,72 -> 468,70 -> 468,72 -> 470,72 -> 470,70 -> 470,72 -> 472,72 -> 472,66 -> 472,72 -> 474,72 -> 474,65 -> 474,72
466,72 -> 466,65 -> 466,72 -> 468,72 -> 468,70 -> 468,72 -> 470,72 -> 470,70 -> 470,72 -> 472,72 -> 472,66 -> 472,72 -> 474,72 -> 474,65 -> 474,72
488,22 -> 493,22
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
424,158 -> 429,158
464,78 -> 464,82 -> 462,82 -> 462,85 -> 476,85 -> 476,82 -> 468,82 -> 468,78
449,125 -> 461,125 -> 461,124
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
453,108 -> 453,112 -> 452,112 -> 452,120 -> 464,120 -> 464,112 -> 458,112 -> 458,108
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
459,88 -> 463,88
466,72 -> 466,65 -> 466,72 -> 468,72 -> 468,70 -> 468,72 -> 470,72 -> 470,70 -> 470,72 -> 472,72 -> 472,66 -> 472,72 -> 474,72 -> 474,65 -> 474,72
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
466,72 -> 466,65 -> 466,72 -> 468,72 -> 468,70 -> 468,72 -> 470,72 -> 470,70 -> 470,72 -> 472,72 -> 472,66 -> 472,72 -> 474,72 -> 474,65 -> 474,72
494,16 -> 499,16
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
480,45 -> 485,45
436,141 -> 436,143 -> 430,143 -> 430,149 -> 449,149 -> 449,143 -> 442,143 -> 442,141
466,72 -> 466,65 -> 466,72 -> 468,72 -> 468,70 -> 468,72 -> 470,72 -> 470,70 -> 470,72 -> 472,72 -> 472,66 -> 472,72 -> 474,72 -> 474,65 -> 474,72
476,43 -> 481,43
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
466,72 -> 466,65 -> 466,72 -> 468,72 -> 468,70 -> 468,72 -> 470,72 -> 470,70 -> 470,72 -> 472,72 -> 472,66 -> 472,72 -> 474,72 -> 474,65 -> 474,72
466,72 -> 466,65 -> 466,72 -> 468,72 -> 468,70 -> 468,72 -> 470,72 -> 470,70 -> 470,72 -> 472,72 -> 472,66 -> 472,72 -> 474,72 -> 474,65 -> 474,72
466,72 -> 466,65 -> 466,72 -> 468,72 -> 468,70 -> 468,72 -> 470,72 -> 470,70 -> 470,72 -> 472,72 -> 472,66 -> 472,72 -> 474,72 -> 474,65 -> 474,72
448,105 -> 448,101 -> 448,105 -> 450,105 -> 450,98 -> 450,105 -> 452,105 -> 452,97 -> 452,105 -> 454,105 -> 454,100 -> 454,105
431,158 -> 436,158
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
495,22 -> 500,22
466,72 -> 466,65 -> 466,72 -> 468,72 -> 468,70 -> 468,72 -> 470,72 -> 470,70 -> 470,72 -> 472,72 -> 472,66 -> 472,72 -> 474,72 -> 474,65 -> 474,72
464,78 -> 464,82 -> 462,82 -> 462,85 -> 476,85 -> 476,82 -> 468,82 -> 468,78
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
409,165 -> 409,166 -> 421,166
513,25 -> 518,25
438,158 -> 443,158
462,90 -> 466,90
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
505,19 -> 510,19
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
453,92 -> 457,92
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
428,160 -> 433,160
463,51 -> 463,53 -> 459,53 -> 459,59 -> 470,59 -> 470,53 -> 468,53 -> 468,51
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
466,72 -> 466,65 -> 466,72 -> 468,72 -> 468,70 -> 468,72 -> 470,72 -> 470,70 -> 470,72 -> 472,72 -> 472,66 -> 472,72 -> 474,72 -> 474,65 -> 474,72
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
453,108 -> 453,112 -> 452,112 -> 452,120 -> 464,120 -> 464,112 -> 458,112 -> 458,108
436,141 -> 436,143 -> 430,143 -> 430,149 -> 449,149 -> 449,143 -> 442,143 -> 442,141
448,105 -> 448,101 -> 448,105 -> 450,105 -> 450,98 -> 450,105 -> 452,105 -> 452,97 -> 452,105 -> 454,105 -> 454,100 -> 454,105
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
453,108 -> 453,112 -> 452,112 -> 452,120 -> 464,120 -> 464,112 -> 458,112 -> 458,108
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
479,41 -> 484,41
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
485,25 -> 490,25
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
430,154 -> 435,154
448,105 -> 448,101 -> 448,105 -> 450,105 -> 450,98 -> 450,105 -> 452,105 -> 452,97 -> 452,105 -> 454,105 -> 454,100 -> 454,105
502,22 -> 507,22
423,154 -> 428,154
420,156 -> 425,156
467,75 -> 485,75 -> 485,74
436,141 -> 436,143 -> 430,143 -> 430,149 -> 449,149 -> 449,143 -> 442,143 -> 442,141
466,72 -> 466,65 -> 466,72 -> 468,72 -> 468,70 -> 468,72 -> 470,72 -> 470,70 -> 470,72 -> 472,72 -> 472,66 -> 472,72 -> 474,72 -> 474,65 -> 474,72
453,108 -> 453,112 -> 452,112 -> 452,120 -> 464,120 -> 464,112 -> 458,112 -> 458,108
417,158 -> 422,158
464,78 -> 464,82 -> 462,82 -> 462,85 -> 476,85 -> 476,82 -> 468,82 -> 468,78
436,141 -> 436,143 -> 430,143 -> 430,149 -> 449,149 -> 449,143 -> 442,143 -> 442,141
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
456,90 -> 460,90
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
498,19 -> 503,19
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
448,105 -> 448,101 -> 448,105 -> 450,105 -> 450,98 -> 450,105 -> 452,105 -> 452,97 -> 452,105 -> 454,105 -> 454,100 -> 454,105
448,105 -> 448,101 -> 448,105 -> 450,105 -> 450,98 -> 450,105 -> 452,105 -> 452,97 -> 452,105 -> 454,105 -> 454,100 -> 454,105
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
409,165 -> 409,166 -> 421,166
464,78 -> 464,82 -> 462,82 -> 462,85 -> 476,85 -> 476,82 -> 468,82 -> 468,78
483,43 -> 488,43
414,160 -> 419,160
464,78 -> 464,82 -> 462,82 -> 462,85 -> 476,85 -> 476,82 -> 468,82 -> 468,78
501,16 -> 506,16
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
459,92 -> 463,92
453,108 -> 453,112 -> 452,112 -> 452,120 -> 464,120 -> 464,112 -> 458,112 -> 458,108
464,78 -> 464,82 -> 462,82 -> 462,85 -> 476,85 -> 476,82 -> 468,82 -> 468,78
436,141 -> 436,143 -> 430,143 -> 430,149 -> 449,149 -> 449,143 -> 442,143 -> 442,141
453,108 -> 453,112 -> 452,112 -> 452,120 -> 464,120 -> 464,112 -> 458,112 -> 458,108
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
467,75 -> 485,75 -> 485,74
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
492,25 -> 497,25
499,25 -> 504,25
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
440,138 -> 440,134 -> 440,138 -> 442,138 -> 442,132 -> 442,138 -> 444,138 -> 444,137 -> 444,138 -> 446,138 -> 446,129 -> 446,138 -> 448,138 -> 448,131 -> 448,138 -> 450,138 -> 450,131 -> 450,138 -> 452,138 -> 452,130 -> 452,138 -> 454,138 -> 454,131 -> 454,138
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
448,105 -> 448,101 -> 448,105 -> 450,105 -> 450,98 -> 450,105 -> 452,105 -> 452,97 -> 452,105 -> 454,105 -> 454,100 -> 454,105
436,141 -> 436,143 -> 430,143 -> 430,149 -> 449,149 -> 449,143 -> 442,143 -> 442,141
483,38 -> 483,28 -> 483,38 -> 485,38 -> 485,33 -> 485,38 -> 487,38 -> 487,31 -> 487,38 -> 489,38 -> 489,37 -> 489,38 -> 491,38 -> 491,36 -> 491,38 -> 493,38 -> 493,28 -> 493,38 -> 495,38 -> 495,32 -> 495,38 -> 497,38 -> 497,31 -> 497,38
463,51 -> 463,53 -> 459,53 -> 459,59 -> 470,59 -> 470,53 -> 468,53 -> 468,51
463,51 -> 463,53 -> 459,53 -> 459,59 -> 470,59 -> 470,53 -> 468,53 -> 468,51
463,51 -> 463,53 -> 459,53 -> 459,59 -> 470,59 -> 470,53 -> 468,53 -> 468,51"""

function read_data(input::String)
    ymin = 1
    xmin = typemax(Int64)
    ymax = -typemax(Int64)
    xmax = -typemax(Int64)
    data = Vector{Vector{Tuple{Int64, Int64}}}()
    for i ∈ eachsplit(input, "\n", keepempty = false)
        line = Vector{Tuple{Int64, Int64}}()
        for coords ∈ eachsplit(i, " -> ", keepempty = false)
            coord = split(coords, ",")
            x = parse(Int64, coord[1])
            y = parse(Int64, coord[2])
            push!(line, (y, x))
            y < ymin && begin ymin = y end
            x < xmin && begin xmin = x end
            y > ymax && begin ymax = y end
            x > xmax && begin xmax = x end
        end
        push!(data, line)
    end
    return (data, (ymin, xmin, ymax, xmax))
end

function setup(lines::Vector{Vector{Tuple{Int64, Int64}}})
    walls = Vector{Tuple{Int64, Int64}}()
    for line ∈ lines
        for l ∈ 1:(length(line)-1)
            Δy = sign(line[l+1][1] - line[l][1])
            Δx = sign(line[l+1][2] - line[l][2])
            if Δx != 0
                for x ∈ min(line[l][2], line[l+1][2]):max(line[l][2], line[l+1][2])
                    push!(walls, (line[l][1], x))
                end
            elseif Δy != 0
                for y ∈ min(line[l][1], line[l+1][1]):max(line[l][1], line[l+1][1])
                    push!(walls, (y, line[l][2]))
                end
            end
        end
    end
    return walls
end

function check(walls::Vector{Tuple{Int64, Int64}}, sand::Vector{Tuple{Int64, Int64}}, y::Int64, x::Int64, floor::Int64 = 0)
    if (floor > 0) && (y + 1) >= floor
        return (0,0)
    end
    !((y+1, x) ∈ walls || (y+1, x) ∈ sand) && return (1, 0)
    !((y+1, x-1) ∈ walls || (y+1, x-1) ∈ sand) && return (1, -1)
    !((y+1, x+1) ∈ walls || (y+1, x+1) ∈ sand) && return (1, 1)
    
    return (0, 0)
end

function print_grid(walls::Vector{Tuple{Int64, Int64}}, edges::Tuple{Int64, Int64, Int64, Int64})
    grid = fill('.', edges[3], edges[4])
    for (y, x) ∈ walls
        grid[y, x] = '#'
    end
    for (y, x) ∈ sand[1:(end-1)]
        grid[y, x] = 'o'
    end
    for y ∈ axes(grid, 1)
        for x ∈ edges[2]:edges[4]
            print(grid[y, x])
        end
        println()
    end
end

function part_one(walls::Vector{Tuple{Int64, Int64}}, edges::Tuple{Int64, Int64, Int64, Int64})
    sand = Vector{Tuple{Int64, Int64}}()
    notdone = true
    while notdone
        (y, x) = (0, 500)
        while ((Δy, Δx) = check(walls, sand, y, x)) != (0, 0)
            #println("Δy=$Δy, Δx=$Δx")
            y = y + Δy
            x = x + Δx
            if (y > edges[3])
                #println("Outside at y=$y, x=$x")
                notdone = false
                break
            end
        end
        push!(sand, (y, x))
    end
    println(string("Part One: ", length(sand)-1))
end

function part_two(walls::Vector{Tuple{Int64, Int64}}, edges::Tuple{Int64, Int64, Int64, Int64})
    sand = Vector{Tuple{Int64, Int64}}()
    notdone = true
    while notdone
        (y, x) = (0, 500)
        while ((Δy, Δx) = check(walls, sand, y, x, edges[3]+2)) != (0, 0)
            y = y + Δy
            x = x + Δx
        end
        if (0, 500) ∈ sand
            break
        end
        push!(sand, (y, x))
    end
    println(string("Part Two: ", length(sand)))
end


lines = read_data(data)
walls = setup(lines[1])
part_one(walls, lines[2])
part_two(walls, lines[2])

